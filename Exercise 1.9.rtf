{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 (define (+ a b)\
    (if (= a 0) b (inc (+ (dec a) b))))\
\
(+ 4 5)\
(inc (+ (dec 4) 5))\
(inc (+ 3 5))\
(inc (inc (+ (dec 3) 5)))\
(inc (inc (+ 2 5)))\
(inc (inc (inc (+ (dec 2) 5))))\
(inc (inc (inc (+ 1 5))))\
(inc (inc (inc (inc (+ (dec 1) 5)))))\
(inc (inc (inc (inc (+ 0 5)))))\
(inc (inc (inc (inc 5))))\
(inc (inc (inc 6)))\
(inc (inc 7))\
(inc 8)\
9\
This process is recursive because it first grows a chain of deferred operations (increments), which the interpreter needs to keep track of to perform later. \
\
\
(define (+ a b)\
    (if (= a 0) b (+ (dec a) (inc b))))\
\
(+ 4 5)\
(+ (dec 4) (inc 5))\
(+ 3 6)\
(+ (dec 3) (inc 6))\
(+ 2 7)\
(+ (dec 2) (inc 7))\
(+ 1 8)\
(+ (dec 1) (inc 8))\
(+ 0 9)\
9\
This process is iterative because the state of the process can be summarized by knowing just two state variables, the values of a and b, and a fixed rule to decrement a and increment b until a is 0.\
}